/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;


import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Songseunghyeop;
import com.example.jooq.generated.tables.Users.UsersPath;
import com.example.jooq.generated.tables.records.TokensRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tokens extends TableImpl<TokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>songseunghyeop.tokens</code>
     */
    public static final Tokens TOKENS = new Tokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokensRecord> getRecordType() {
        return TokensRecord.class;
    }

    /**
     * The column <code>songseunghyeop.tokens.token_no</code>.
     */
    public final TableField<TokensRecord, Integer> TOKEN_NO = createField(DSL.name("token_no"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>songseunghyeop.tokens.user_no</code>.
     */
    public final TableField<TokensRecord, Integer> USER_NO = createField(DSL.name("user_no"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>songseunghyeop.tokens.refresh_token</code>.
     */
    public final TableField<TokensRecord, String> REFRESH_TOKEN = createField(DSL.name("refresh_token"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>songseunghyeop.tokens.client_os</code>.
     */
    public final TableField<TokensRecord, String> CLIENT_OS = createField(DSL.name("client_os"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>songseunghyeop.tokens.access_token_expires_at</code>.
     */
    public final TableField<TokensRecord, LocalDateTime> ACCESS_TOKEN_EXPIRES_AT = createField(DSL.name("access_token_expires_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>songseunghyeop.tokens.refresh_token_expires_at</code>.
     */
    public final TableField<TokensRecord, LocalDateTime> REFRESH_TOKEN_EXPIRES_AT = createField(DSL.name("refresh_token_expires_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>songseunghyeop.tokens.created_at</code>.
     */
    public final TableField<TokensRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    private Tokens(Name alias, Table<TokensRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tokens(Name alias, Table<TokensRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>songseunghyeop.tokens</code> table reference
     */
    public Tokens(String alias) {
        this(DSL.name(alias), TOKENS);
    }

    /**
     * Create an aliased <code>songseunghyeop.tokens</code> table reference
     */
    public Tokens(Name alias) {
        this(alias, TOKENS);
    }

    /**
     * Create a <code>songseunghyeop.tokens</code> table reference
     */
    public Tokens() {
        this(DSL.name("tokens"), null);
    }

    public <O extends Record> Tokens(Table<O> path, ForeignKey<O, TokensRecord> childPath, InverseForeignKey<O, TokensRecord> parentPath) {
        super(path, childPath, parentPath, TOKENS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TokensPath extends Tokens implements Path<TokensRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TokensPath(Table<O> path, ForeignKey<O, TokensRecord> childPath, InverseForeignKey<O, TokensRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TokensPath(Name alias, Table<TokensRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TokensPath as(String alias) {
            return new TokensPath(DSL.name(alias), this);
        }

        @Override
        public TokensPath as(Name alias) {
            return new TokensPath(alias, this);
        }

        @Override
        public TokensPath as(Table<?> alias) {
            return new TokensPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Songseunghyeop.SONGSEUNGHYEOP;
    }

    @Override
    public Identity<TokensRecord, Integer> getIdentity() {
        return (Identity<TokensRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TokensRecord> getPrimaryKey() {
        return Keys.KEY_TOKENS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TokensRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TOKENS_REFRESH_TOKEN);
    }

    @Override
    public List<ForeignKey<TokensRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TOKENS_USER);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>songseunghyeop.users</code>
     * table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.FK_TOKENS_USER, null);

        return _users;
    }

    @Override
    public Tokens as(String alias) {
        return new Tokens(DSL.name(alias), this);
    }

    @Override
    public Tokens as(Name alias) {
        return new Tokens(alias, this);
    }

    @Override
    public Tokens as(Table<?> alias) {
        return new Tokens(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokens rename(String name) {
        return new Tokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokens rename(Name name) {
        return new Tokens(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokens rename(Table<?> name) {
        return new Tokens(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokens where(Condition condition) {
        return new Tokens(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokens where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokens where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokens where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tokens where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tokens where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tokens where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tokens where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokens whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokens whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
