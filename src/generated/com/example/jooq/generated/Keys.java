/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated;


import com.example.jooq.generated.tables.Todos;
import com.example.jooq.generated.tables.Tokens;
import com.example.jooq.generated.tables.Users;
import com.example.jooq.generated.tables.records.TodosRecord;
import com.example.jooq.generated.tables.records.TokensRecord;
import com.example.jooq.generated.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * songseunghyeop.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<TodosRecord> KEY_TODOS_PRIMARY = Internal.createUniqueKey(Todos.TODOS, DSL.name("KEY_todos_PRIMARY"), new TableField[] { Todos.TODOS.TODO_ID }, true);
    public static final UniqueKey<TokensRecord> KEY_TOKENS_PRIMARY = Internal.createUniqueKey(Tokens.TOKENS, DSL.name("KEY_tokens_PRIMARY"), new TableField[] { Tokens.TOKENS.TOKEN_NO }, true);
    public static final UniqueKey<TokensRecord> KEY_TOKENS_REFRESH_TOKEN = Internal.createUniqueKey(Tokens.TOKENS, DSL.name("KEY_tokens_refresh_token"), new TableField[] { Tokens.TOKENS.REFRESH_TOKEN }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_EMAIL = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_email"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_PRIMARY"), new TableField[] { Users.USERS.USER_NO }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<TodosRecord, UsersRecord> FK_TODOS_USER = Internal.createForeignKey(Todos.TODOS, DSL.name("fk_todos_user"), new TableField[] { Todos.TODOS.USER_NO }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.USER_NO }, true);
    public static final ForeignKey<TokensRecord, UsersRecord> FK_TOKENS_USER = Internal.createForeignKey(Tokens.TOKENS, DSL.name("fk_tokens_user"), new TableField[] { Tokens.TOKENS.USER_NO }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.USER_NO }, true);
}
