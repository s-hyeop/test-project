/*
 * This file is generated by jOOQ.
 */
package com.example.jooq;


import com.example.jooq.tables.JTodos;
import com.example.jooq.tables.JTokens;
import com.example.jooq.tables.JUsers;

import org.jooq.ForeignKey;
import org.jooq.Record;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * songseunghyeop.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<Record> KEY_TODOS_PRIMARY = Internal.createUniqueKey(JTodos.TODOS, DSL.name("KEY_todos_PRIMARY"), new TableField[] { JTodos.TODOS.TODO_ID }, true);
    public static final UniqueKey<Record> KEY_TOKENS_PRIMARY = Internal.createUniqueKey(JTokens.TOKENS, DSL.name("KEY_tokens_PRIMARY"), new TableField[] { JTokens.TOKENS.TOKEN_NO }, true);
    public static final UniqueKey<Record> KEY_TOKENS_REFRESH_TOKEN = Internal.createUniqueKey(JTokens.TOKENS, DSL.name("KEY_tokens_refresh_token"), new TableField[] { JTokens.TOKENS.REFRESH_TOKEN }, true);
    public static final UniqueKey<Record> KEY_USERS_EMAIL = Internal.createUniqueKey(JUsers.USERS, DSL.name("KEY_users_email"), new TableField[] { JUsers.USERS.EMAIL }, true);
    public static final UniqueKey<Record> KEY_USERS_PRIMARY = Internal.createUniqueKey(JUsers.USERS, DSL.name("KEY_users_PRIMARY"), new TableField[] { JUsers.USERS.USER_NO }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<Record, Record> FK_TODOS_USER = Internal.createForeignKey(JTodos.TODOS, DSL.name("fk_todos_user"), new TableField[] { JTodos.TODOS.USER_NO }, Keys.KEY_USERS_PRIMARY, new TableField[] { JUsers.USERS.USER_NO }, true);
    public static final ForeignKey<Record, Record> FK_TOKENS_USER = Internal.createForeignKey(JTokens.TOKENS, DSL.name("fk_tokens_user"), new TableField[] { JTokens.TOKENS.USER_NO }, Keys.KEY_USERS_PRIMARY, new TableField[] { JUsers.USERS.USER_NO }, true);
}
