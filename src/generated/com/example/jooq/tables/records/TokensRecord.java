/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables.records;


import com.example.jooq.tables.JTokens;
import com.example.jooq.tables.pojos.Tokens;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokensRecord extends UpdatableRecordImpl<TokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>songseunghyeop.tokens.token_no</code>.
     */
    public TokensRecord setTokenNo(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>songseunghyeop.tokens.token_no</code>.
     */
    public Integer getTokenNo() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>songseunghyeop.tokens.user_no</code>.
     */
    public TokensRecord setUserNo(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>songseunghyeop.tokens.user_no</code>.
     */
    public Integer getUserNo() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>songseunghyeop.tokens.refresh_token</code>.
     */
    public TokensRecord setRefreshToken(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>songseunghyeop.tokens.refresh_token</code>.
     */
    public String getRefreshToken() {
        return (String) get(2);
    }

    /**
     * Setter for <code>songseunghyeop.tokens.client_os</code>.
     */
    public TokensRecord setClientOs(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>songseunghyeop.tokens.client_os</code>.
     */
    public String getClientOs() {
        return (String) get(3);
    }

    /**
     * Setter for <code>songseunghyeop.tokens.access_token_expires_at</code>.
     */
    public TokensRecord setAccessTokenExpiresAt(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>songseunghyeop.tokens.access_token_expires_at</code>.
     */
    public LocalDateTime getAccessTokenExpiresAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>songseunghyeop.tokens.refresh_token_expires_at</code>.
     */
    public TokensRecord setRefreshTokenExpiresAt(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>songseunghyeop.tokens.refresh_token_expires_at</code>.
     */
    public LocalDateTime getRefreshTokenExpiresAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>songseunghyeop.tokens.created_at</code>.
     */
    public TokensRecord setCreatedAt(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>songseunghyeop.tokens.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TokensRecord
     */
    public TokensRecord() {
        super(JTokens.TOKENS);
    }

    /**
     * Create a detached, initialised TokensRecord
     */
    public TokensRecord(Integer tokenNo, Integer userNo, String refreshToken, String clientOs, LocalDateTime accessTokenExpiresAt, LocalDateTime refreshTokenExpiresAt, LocalDateTime createdAt) {
        super(JTokens.TOKENS);

        setTokenNo(tokenNo);
        setUserNo(userNo);
        setRefreshToken(refreshToken);
        setClientOs(clientOs);
        setAccessTokenExpiresAt(accessTokenExpiresAt);
        setRefreshTokenExpiresAt(refreshTokenExpiresAt);
        setCreatedAt(createdAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TokensRecord
     */
    public TokensRecord(Tokens value) {
        super(JTokens.TOKENS);

        if (value != null) {
            setTokenNo(value.getTokenNo());
            setUserNo(value.getUserNo());
            setRefreshToken(value.getRefreshToken());
            setClientOs(value.getClientOs());
            setAccessTokenExpiresAt(value.getAccessTokenExpiresAt());
            setRefreshTokenExpiresAt(value.getRefreshTokenExpiresAt());
            setCreatedAt(value.getCreatedAt());
            resetChangedOnNotNull();
        }
    }
}
