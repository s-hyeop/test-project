/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.JSongseunghyeop;
import com.example.jooq.Keys;
import com.example.jooq.tables.JUsers.UsersPath;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JTodos extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>songseunghyeop.todos</code>
     */
    public static final JTodos TODOS = new JTodos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>songseunghyeop.todos.todo_id</code>.
     */
    public final TableField<Record, String> TODO_ID = createField(DSL.name("todo_id"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>songseunghyeop.todos.user_no</code>.
     */
    public final TableField<Record, Integer> USER_NO = createField(DSL.name("user_no"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>songseunghyeop.todos.title</code>.
     */
    public final TableField<Record, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>songseunghyeop.todos.content</code>.
     */
    public final TableField<Record, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songseunghyeop.todos.color</code>.
     */
    public final TableField<Record, String> COLOR = createField(DSL.name("color"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>songseunghyeop.todos.sequence</code>.
     */
    public final TableField<Record, Integer> SEQUENCE = createField(DSL.name("sequence"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>songseunghyeop.todos.due_at</code>.
     */
    public final TableField<Record, LocalDate> DUE_AT = createField(DSL.name("due_at"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>songseunghyeop.todos.completed_at</code>.
     */
    public final TableField<Record, LocalDateTime> COMPLETED_AT = createField(DSL.name("completed_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>songseunghyeop.todos.created_at</code>.
     */
    public final TableField<Record, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>songseunghyeop.todos.updated_at</code>.
     */
    public final TableField<Record, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    private JTodos(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JTodos(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>songseunghyeop.todos</code> table reference
     */
    public JTodos(String alias) {
        this(DSL.name(alias), TODOS);
    }

    /**
     * Create an aliased <code>songseunghyeop.todos</code> table reference
     */
    public JTodos(Name alias) {
        this(alias, TODOS);
    }

    /**
     * Create a <code>songseunghyeop.todos</code> table reference
     */
    public JTodos() {
        this(DSL.name("todos"), null);
    }

    public <O extends Record> JTodos(Table<O> path, ForeignKey<O, Record> childPath, InverseForeignKey<O, Record> parentPath) {
        super(path, childPath, parentPath, TODOS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TodosPath extends JTodos implements Path<Record> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TodosPath(Table<O> path, ForeignKey<O, Record> childPath, InverseForeignKey<O, Record> parentPath) {
            super(path, childPath, parentPath);
        }
        private TodosPath(Name alias, Table<Record> aliased) {
            super(alias, aliased);
        }

        @Override
        public TodosPath as(String alias) {
            return new TodosPath(DSL.name(alias), this);
        }

        @Override
        public TodosPath as(Name alias) {
            return new TodosPath(alias, this);
        }

        @Override
        public TodosPath as(Table<?> alias) {
            return new TodosPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JSongseunghyeop.SONGSEUNGHYEOP;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_TODOS_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TODOS_USER);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>songseunghyeop.users</code>
     * table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.FK_TODOS_USER, null);

        return _users;
    }

    @Override
    public JTodos as(String alias) {
        return new JTodos(DSL.name(alias), this);
    }

    @Override
    public JTodos as(Name alias) {
        return new JTodos(alias, this);
    }

    @Override
    public JTodos as(Table<?> alias) {
        return new JTodos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JTodos rename(String name) {
        return new JTodos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTodos rename(Name name) {
        return new JTodos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTodos rename(Table<?> name) {
        return new JTodos(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTodos where(Condition condition) {
        return new JTodos(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTodos where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTodos where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTodos where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTodos where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTodos where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTodos where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTodos where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTodos whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTodos whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
