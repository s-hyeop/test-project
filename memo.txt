주제: TODO List

|페이지 정리
 01. 인트로 페이지
 02. TODO 목록 페이지
 03. TODO 보기 페이지
 04. TODO 작성 페이지
 05. TODO 수정 페이지
 06. 로그인 이메일 입력 페이지
 07. 로그인 페이지
 08. 회원가입 페이지 -(이메일 인증 대기)> Waiting Modal -(이메일 인증 성공)> Success Modal -> 로그인 페이지로 이동
 09. 비밀번호 초기화, 이메일 입력 페이지 -(이메일 인증 대기)> Waiting Modal -(이메일 인증 성공)> Success Modal -> 비밀번호 초기화 페이지로 이동
 10. 비밀번호 초기화, 비밀번호 초기화 페이지 -> Success Modal -> 로그인 페이지로 이동
 11. 마이 페이지 - 회원 정보 및 투두 통계, 비밀번호 변경, 현재 접속된 계정 불러오기
 12. 이메일 인증 완료[ 회원가입, 이메일 ]
 13. 이메일 인증 실패[ 회원가입, 이메일 ]

|페이지별 요구 사항 정리
 1. TODO 메모지 색상 지원
 2. TODO 통계 [ TODO 전체 달성률, 오늘 완료한 TODO, 미완료 TODO ]
 3. 현재 접속된 계정 불러오기

|JWT 구조
 * 로그인
  - AT(JWT), RT 발급
 * 재발급
  - 1. IF (AT.expiresAt - 임계시간 >= now()) 비정상 재발급
  - 2. IF (RT.expiresAt >= now()) 만료
  - 3. AT 발급, RT DB 갱신
 * 그 외 요청
  - IF AT 만료: 40X
  - IF AT 만료 임박: header "X-Token-Refresh-Now: 1"

|데이터베이스
  users [
    user_no, int, [PK, AI, NN] # 회원 고유 번호
    email, varchar(300), [UK, NN] # 이메일
    password, varchar(100), [NN] # 비밀번호
    user_name, varchar(30), [NN] # 회원이름
    role, varchar(10), [NN] # 권한
    created_at, DATETIME, DEFAULT CURRENT_TIMESTAMP(), [NN] # 생성일
    deleted_at, DATETIME, DEFAULT NULL # 탈퇴일
    last_login_at, DATETIME, DEFAULT NULL # 마지막 로그인 일
  ]
  todos [
    todo_id, char(36), [PK, NN] # TODO 아이디
    user_no, int, [NN, FK(users.user_no ON DELETE `삭제`)] # 이메일
    title, VARCHAR(300), [NN] # 제목
    content, TEXT, [NN] # 내용
    color, VARCHAR(30), [NN] # 색상
    sequence, INT, [NN] # 순서
    due_at, DATE, [NN] # 마감일
    completed_at, DATETIME, NULL # 완료일
    created_at, DATETIME, DEFAULT CURRENT_TIMESTAMP(), [NN] # 생성일
    updated_at, DATETIME, DEFAULT NULL # 수정일
  ]
  tokens [
    token_no, [PK, AI, NN]
    user_no, int, [NN, FK(users.user_no ON DELETE `삭제`)] # 이메일
    refresh_token, char(36), [NN, UK] # refresh_token
    client_os, varchar(100), [NN] # 최초 발급 OS
    access_token_expires_at, DATETIME, [NN] # AT 만료일자
    refresh_token_expires_at, DATETIME, [NN] # RT 만료일자
    created_at, DATETIME, DEFAULT CURRENT_TIMESTAMP(), [NN] # 토큰 생성일자
  ]

|REST API
  00. response header

  01. todo 목록 불러오기: {
    uri: [GET] /todos
      ?status=[all|complete|incomplete]
      &searchType[title|content]
      &keyword
      &page
      &size
    request: null # TodoListRequest.java
    response: [{
      todoId
      title
      content
      color
      sequence
      dueAt
      completedAt
      createdAt
      updatedAt
    }] # TodoDetailResponse
    response header: {
      X-Total-Count
    }
  }

  02. todo 단일 불러오기: {
    uri: [GET] /todos/{todoId}
    request: null
    response: {
      todoId
      title
      content
      color
      sequence
      dueAt
      completedAt
      createdAt
      updatedAt
    } # TodoDetailResponse
  }

  03. todo 작성: {
    uri: [POST] /todos
    request: {
      title
      content
      color
      dueAt
    } # TodoCreateRequest.java
    response: { todoId } # TodoCreateResponse.java
  }

  04. todo 일괄 수정: {
    uri: [PUT] /todos/{todoId}
    request: {
      title
      content
      color
      dueAt
    } # TodoUpdateRequest.java
    response: null
  }

  05. todo 부분 수정: {
    uri: [PATCH] /todos/{todoId}
    request: {
      ?completed: bool
      ?sequence: int
    } # TodoPatchRequest.java
    response: null
  }

  06. todo 삭제: {
    uri: [DELETE] /todos/{todoId}
    request: null
    response: null
  }

  07. 이메일 있는지 확인: {
    uri: [POST] /auth/email/validate
    request: { email } # EmailValidateRequest.java
    response: null
  }

  08. 로그인 처리: {
    uri: [POST] /auth/login 
    request: {
      email
      password
    } # LoginRequest.java
    response: {
      JWT 관련 반환
    } # AccessTokenResponse.java
  }

  09. 회원가입 요청 (이메일 인증번호 전송): {
    uri: [POST] /auth/signup/code
    request: { email } # SignupCodeSendRequest.java
    response: null
  }

  10. 회원가입 인증번호 확인(코드 확인만): {
    uri: [POST] /auth/signup/verify
    request: {
      email
      code
    } # SignupCodeVerifyRequest.java
    response: null
  }

  11. 회원가입 처리 (실제 처리 및 이메일 인증번호 말소){
    uri: [POST] /auth/signup
    request: {
      email
      password
      userName
      code
    } # SignupRequest.java
    response: null
  }

  12. 비밀번호 재설정 요청 (이메일 인증번호 전송): {
    uri: [POST] /auth/reset-password/code
    request: { email } # ResetPasswordCodeSendRequest.java
    response: null
  }

  13. 비밀번호 재설정 인증번호 확인(코드 확인만): {
    uri: [POST] /auth/reset-password/verify
    request: {
      email
      code
    } # ResetPasswordCodeVerifyRequest.java
    response: null
  }

  14. 비밀번호 재설정 처리 (실제 처리 및 이메일 인증번호 말소){
    uri: [POST] /auth/reset-password
    request: {
      email
      password
      code
    } # ResetPasswordRequest.java
    response: null
  }

  15. 회원 정보 불러오기: {
    uri: [GET] /users
    request: null
    response: {
      email
      userName
      createdAt
    } # UserDetailResponse.java
  }

  16. todo 통계 정보 불러오기: {
    uri: [GET] /todos/statistics
    request: null
    response: {
      totalCount // 전체 개수
      completedCount // 완료 개수
      todayCompletedCount // 오늘 완료한 개수
    } # TodoStatisticsResponse.java
  }

  17. 로그인 정보 불러오기: {
    uri: [GET] /auth/tokens
    request: null
    response: [{
      clientOs
      createdAt
    }] # RefreshTokenResponse.java
  }

  18. 회원 정보 변경: {
    uri: [PATCH] /users
    request: { userName } # UserPatchRequest.java
    response: null
  }

  19. 비밀번호 변경: {
    uri: [PATCH] /users/change-password
    request: {
      password
      newPassword
    } # UserChangePasswordRequest.java
    response: null
  }

  20. 토큰 재발급: {
    uri: [POST] /auth/tokens/refresh
    request: null
    response: {
      JWT 관련 반환
    } # AccessTokenResponse.java
  }

  21. 타겟 로그아웃: {
    uri: [DELETE] /auth/tokens/{tokenNo}|current
    request: null
    response: null
  }

  [POST]   /auth/email/validate # 이메일 유효한지 확인
  [POST]   /auth/login # 로그인 처리
  [POST]   /auth/signup/code # 회원가입 이메일 코드 발송
  [POST]   /auth/signup/verify # 회원가입 이메일 코드 확인
  [POST]   /auth/signup # 회원가입 처리
  [POST]   /auth/reset-password/code # 비밀번호 재설정 이메일 코드 발송
  [POST]   /auth/reset-password/verify # 비밀번호 재설정 이메일 코드 확인
  [POST]   /auth/reset-password # 비밀번호 재설정 처리
  [GET]    /auth/tokens # 내 토큰(세션)목록 불러오기
  [POST]   /auth/tokens/refresh # 내 토큰(세션) 재발급
  [DELETE] /auth/tokens/{tokenNo}|current # 내 토큰(세션) 삭제(로그아웃)

  [GET]    /todos # TODO 목록 조회
  [GET]    /todos/{todoId} # TODO 선택 조회
  [POST]   /todos # TODO 추가
  [PUT]    /todos/{todoId} # TODO 일괄 수정
  [PATCH]  /todos/{todoId} # TODO 부분 수정
  [DELETE] /todos/{todoId} # TODO 삭제
  [GET]    /todos/statistics # 나의 TODO 통계 불러오기

  [GET]    /users # 회원 정보 조회
  [PATCH]  /users # 회원 정보 부분 수정
  [PATCH]  /users/password # 회원 비밀번호 재설정 (현재 비밀번호 확인이 필요함으로 별도 로직으로 분리)


|참고
  * 시간
    - Java OffsetDateTime
    - DB DATETIME

  * [보안] 이메일 인증 회수 제한
    - redis signup:email-code:난수 = ******
    - redis signup:email-fail-count:난수 = ******
    - 인증 시도 -> count 읽기 -> if count<=5 -> 실패 -> --count

  * [보안] 환경변수 관리 (Git에 업로드 되지 않도록)

  * [보안] 로그인 Rate Limiting
    - 실패 {
      TTL 설정
      없으면 redis 추가
      있으면 ++counter
    }

  * 로그 레벨
    1. TRACE
    2. DEBUG
    3. INFO
    4. WARN
    5. ERROR
    6. FATAL

  * JWT 로그인 예제
    defailt:
      1. security form.login(UsernamePasswordAuthenticationFilter) 를 비활성화 한다.
        -> UsernamePasswordAuthenticationFilter를 비활성화 하지 않을 경우 UsernamePasswordAuthenticationFilter를 POST /login 을 Mapping 해서 AuthenticationManager를 실행한다.
      2. security config 에서 AuthenticationManager의 DaoAuthenticationProvider 가 실행할 UserDetailsService 와 PasswordEncoder 를 만들어 내껄로 덮어써 준다.
        -> 아닐 경우 security 기본 DaoAuthenticationProvider.UserDetailsService 가 실행 됨.
      3. UserDetails 구현 해둬야 함 (UserDetailsService 의 출력 값 인터페이스임)

    example:
      @PostMapping("/auth/login")
      public ResponseEntity<Void> login(@RequestBody LoginRequest request) {
          LoginResponse response = AuthService.login(request);

          // LoginResponse 의 cookie 는 출력안되게끔 설정

          return ResponseEntity.ok()
              .header(HttpHeaders.SET_COOKIE, response.cookie.toString())
              .body(response);
      }


      public LoginResponse login(LoginRequest request) {
          // Rate Limiting 로직 수행

          Authentication authentication = authenticationManager.authenticate(
              new UsernamePasswordAuthenticationToken(
                      request.getEmail(),
                      request.getPassword()
              )
          );

          // 인증 성공 시 authentication.getPrincipal() 에 UserDetails 들어있음
          CustomUserDetails userDetails = (CustomUserDetails) authentication.getPrincipal(); // 없으면 실패 예외 던지기

          // JWT 발급
          String token = jwtTokenProvider.createToken(userDetails.getId(), userDetails.getAuthorities());

          // 등등 db 로직

          return loginResponse;
      }